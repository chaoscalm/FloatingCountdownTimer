plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'

    // https://github.com/google/ksp/releases
    id 'com.google.devtools.ksp' version '1.9.23-1.0.19'
}

android {
    compileSdk 34

    defaultConfig {
        applicationId "xyz.tberghuis.floatingtimer"
        minSdk 26
        targetSdk 34
        versionCode 58
        versionName "1.30.1"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            buildConfigField 'Boolean', 'DEFAULT_PURCHASED', "false"
        }
        debug {
            buildConfigField 'Boolean', 'DEFAULT_PURCHASED', "false"
        }
        unlockTmp {
            initWith(buildTypes.debug)
            buildConfigField 'Boolean', 'DEFAULT_PURCHASED', "true"
            signingConfig signingConfigs.debug
        }
    }
    // todo read
    // https://stefma.medium.com/sourcecompatibility-targetcompatibility-and-jvm-toolchains-in-gradle-explained-d2c17c8cff7c
    // use sdkman to manage java versions
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
//        sourceCompatibility JavaVersion.VERSION_19
//        targetCompatibility JavaVersion.VERSION_19
    }
    kotlinOptions {
        jvmTarget = '17'
//        jvmTarget = '19'
    }
    buildFeatures {
        compose true
        viewBinding true
        buildConfig true
    }
    composeOptions {
        // https://www.jetpackcomposeversion.com/
        kotlinCompilerExtensionVersion "1.5.11"
    }
    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }
    namespace 'xyz.tberghuis.floatingtimer'

}

dependencies {
    androidTestImplementation 'androidx.test:rules:1.5.0'

    // https://developer.android.com/jetpack/compose/bom/bom-mapping
    def composeBom = platform('androidx.compose:compose-bom:2024.04.00')
    implementation composeBom
    androidTestImplementation composeBom
    implementation 'androidx.compose.material3:material3'
    implementation 'androidx.compose.ui:ui-tooling-preview'
    debugImplementation 'androidx.compose.ui:ui-tooling'

    implementation "androidx.compose.material:material-icons-extended"

    implementation 'androidx.core:core-ktx:1.12.0'

    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.7.0'
    implementation 'androidx.activity:activity-compose:1.8.2'

    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'

    androidTestImplementation "androidx.test.ext:junit-ktx:1.1.5"
    androidTestImplementation "androidx.compose.ui:ui-test"
    androidTestImplementation "androidx.compose.ui:ui-test-junit4"
    debugImplementation "androidx.compose.ui:ui-test-manifest"


    implementation "androidx.datastore:datastore-preferences:1.0.0"

    def billing_version = "6.2.0"
    implementation "com.android.billingclient:billing-ktx:$billing_version"
    // https://www.youtube.com/watch?v=meRGGTFZ9Kc
    constraints.implementation "androidx.fragment:fragment:1.6.2"

    implementation "androidx.navigation:navigation-compose:2.7.7"

    // todo learn proper gradle tasks for android library
    // forked https://github.com/godaddy/compose-color-picker
    implementation name: 'color-picker-full'
    implementation("com.github.ajalt.colormath:colormath:3.2.0")

    // https://github.com/TorryDo/ScreenEasy
    implementation "io.github.torrydo:screen-easy:0.1.0"
    implementation "androidx.lifecycle:lifecycle-service:2.7.0"
    implementation "com.google.accompanist:accompanist-permissions:0.32.0"

    def room_version = "2.6.1"
    implementation "androidx.room:room-runtime:$room_version"
    implementation "androidx.room:room-ktx:$room_version"
    // is annotationProcessor needed???
//    annotationProcessor "androidx.room:room-compiler:$room_version"
    ksp "androidx.room:room-compiler:$room_version"
}

ksp {
    arg('room.schemaLocation', "$projectDir/schemas")
}